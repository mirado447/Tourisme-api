openapi: 3.0.3
info:
  title: Tour Management API
  description: API for managing tourist circuits
  version: 'latest'
servers:
  - url: http://localhost:8080/api
tags:
  - name: Tours
    description: Endpoints related to tours
  - name: Users
    description: Endpoints related to users
  - name: Itineraries
    description: Endpoints related to itineraries
  - name: Restaurants
    description: Endpoints related to restaurants
  - name: Interest Points
    description: Endpoints related to points of interest
  - name: Preferences
    description: Endpoints related to user preferences
paths:
  /tours:
    get:
      tags:
        - Tours
      summary: Get all tours
      responses:
        '200':
          description: A list of tours
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tour'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - Tours
      summary: Create a new tour
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tour'
      responses:
        '201':
          description: Tour created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tour'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /tours/{tourId}:
    get:
      tags:
        - Tours
      summary: Get a specific tour by ID
      parameters:
        - name: tourId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Tour details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tour'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Tours
      summary: Update a specific tour by ID
      parameters:
        - name: tourId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tour'
      responses:
        '200':
          description: Tour updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tour'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - Tours
      summary: Delete a specific tour by ID
      parameters:
        - name: tourId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Tour deleted
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - Users
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /users/{userId}:
    get:
      tags:
        - Users
      summary: Get a specific user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Users
      summary: Update a specific user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - Users
      summary: Delete a specific user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /itineraries:
    get:
      tags:
        - Itineraries
      summary: Get all itineraries
      responses:
        '200':
          description: A list of itineraries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Itinerary'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - Itineraries
      summary: Create a new itinerary
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Itinerary'
      responses:
        '201':
          description: Itinerary created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Itinerary'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /itineraries/{itineraryId}:
    get:
      tags:
        - Itineraries
      summary: Get a specific Itinerary by ID
      parameters:
        - name: itineraryId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Itinerary details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Itinerary'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Itineraries
      summary: Update a specific itinerary by ID
      parameters:
        - name: itineraryId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Itinerary'
      responses:
        '200':
          description: Itinerary updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Itinerary'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /restaurants:
    get:
      tags:
        - Restaurants
      summary: Get all restaurants
      responses:
        '200':
          description: A list of restaurants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurant'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - Restaurants
      summary: Create a new restaurant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restaurant'
      responses:
        '201':
          description: Restaurants created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /restaurants/{restaurantId}:
    get:
      tags:
        - Restaurants
      summary: Get a specific restaurant by ID
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: restaurant details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Restaurants
      summary: Update a specific restaurant by ID
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restaurant'
      responses:
        '200':
          description: Restaurant updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /interest:
    get:
      tags:
        - Interest Points
      summary: Get all interest points
      responses:
        '200':
          description: A list of interest points
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InterestPoint'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - Interest Points
      summary: Create a new interest point
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterestPoint'
      responses:
        '201':
          description: interest point created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterestPoint'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /interest_point/{interestId}:
    get:
      tags:
        - Interest Points
      summary: Get a specific interest point by ID
      parameters:
        - name: interestId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: interest point details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterestPoint'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Interest Points
      summary: Update a specific interest point by ID
      parameters:
        - name: interestId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterestPoint'
      responses:
        '200':
          description: interest point updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterestPoint'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /preferences:
    post:
      tags:
        - Preferences
      summary: Create a new preference
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Preference'
      responses:
        '201':
          description: preference created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Preference'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /preferences/{preferenceId}:
    get:
      tags:
        - Preferences
      summary: Get a specific preference by ID
      parameters:
        - name: preferenceId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: preference details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Preference'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Preferences
      summary: Update a specific preference by ID
      parameters:
        - name: preferenceId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Preference'
      responses:
        '200':
          description: preference updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Preference'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
components:
  schemas:
    Tour:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        itinerary:
          $ref: '#/components/schemas/Itinerary'
        cost:
          type: number
          format: float
        user:
          $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        email:
          type: string
        password:
          type: string
    Itinerary:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        startLocation:
          $ref: '#/components/schemas/Location'
        endLocation:
          $ref: '#/components/schemas/Location'
        duration:
          type: integer
          description: Duration in minutes
    Preference:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        startLocation:
          $ref: '#/components/schemas/Location'
        endLocation:
          $ref: '#/components/schemas/Location'
        maxBudget:
          type: number
          format: float
        maxDuration:
          type: integer
          description: Maximum duration in minutes
        user:
          $ref: '#/components/schemas/User'
    Location:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        description:
          type: string
        cost:
          type: number
          format: float
        location:
          $ref: '#/components/schemas/Location'
    InterestPoint:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        description:
          type: string
        cost:
          type: number
          format: float
    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    TooManyRequestsException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: TooManyRequestsException
        message: Too many requests
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerException
        message: Unexpected error
  responses:
    400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    429:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsException'
    500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'
